/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 Model.glb --types 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF, useMatcapTexture } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useSnapshot } from 'valtio'
import { modelState } from './store'
import { useAnimation } from './useAnimation'

type GLTFResult = GLTF & {
  nodes: {
    Alpha_Joints: THREE.SkinnedMesh
    Alpha_Surface: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {
    Alpha_Joints_MAT: THREE.MeshStandardMaterial
    Alpha_Body_MAT: THREE.MeshStandardMaterial
  }
}

const modelPath = '/assets/Model.glb';


export const Model: React.FC<JSX.IntrinsicElements['group']> = props => {
  const modelSnap = useSnapshot(modelState);
  const { nodes, materials } = useGLTF(modelPath) as GLTFResult;

  const groupRef = useAnimation() as React.Ref<THREE.Group>
  const [matcapBody] = useMatcapTexture(modelSnap.texture.body, 512);
  const [matcapJoints] = useMatcapTexture(modelSnap.texture.joint, 512);

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.02}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Alpha_Joints"
            geometry={nodes.Alpha_Joints.geometry}
            material={materials.Alpha_Joints_MAT}
            skeleton={nodes.Alpha_Joints.skeleton}
          >
            <meshMatcapMaterial matcap={matcapJoints} />
          </skinnedMesh>
          <skinnedMesh
            name="Alpha_Surface"
            geometry={nodes.Alpha_Surface.geometry}
            material={materials.Alpha_Body_MAT}
            skeleton={nodes.Alpha_Surface.skeleton}>
            <meshMatcapMaterial attach="material" matcap={matcapBody} />
            </skinnedMesh>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(modelPath)
